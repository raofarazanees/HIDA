/* eslint no-console: ["error", { allow: ["warn", "error"] }] */

// the objective of this script is to create two cdnized builds; one for stable and one for prod
// the NodeJS server is now acting as the CloudFront origin, not S3
// assumes a webpack build has run and exists in ./dest/

// this script creates two cdnized builds
// copied out of /dest/web/${appConfig.appNamespace}/`(generated by a webpack build)
const cdnizerFactory = require('cdnizer');
const appConfig = require('./app.config');
const fs = require('fs-extra');
const destPrefix = './dest';
const appNamespace = appConfig.appNamespace;
const appPathSuffix = appNamespace === '' ? '/' : `/${appNamespace}/`;
const destDirectory = `${destPrefix}/web`;
const stableDestDirectory = `${destPrefix}/dev.stable`;
const prodDestDirectory = `${destPrefix}/prod.prod1`;
const destIndexFilePath = `${destDirectory}${appPathSuffix}index.html`;
const indexHtmlContents = fs.readFileSync(destIndexFilePath, 'utf8');

function cdnizeBuild(basePath, destinationPath) {
  const cdnizer = cdnizerFactory({
    defaultCDNBase: basePath,
    files: ['**/*.js', '**/*.png', '**/*.css'],
    excludeAbsolute: true
  });
  const newIndexHtml = cdnizer(indexHtmlContents);

  fs.writeFileSync(destinationPath, newIndexHtml);
}

// cdnize for stable
fs.copy(`${destDirectory}`, stableDestDirectory, (err) => {
  if (err) {
    return console.error(err);
  }

  cdnizeBuild(appConfig.aws.basePath.stable, `${stableDestDirectory}${appPathSuffix}index.html`);
});

// cdninze for prod
fs.copy(`${destDirectory}`, prodDestDirectory, (err) => {
  if (err) {
    return console.error(err);
  }

  cdnizeBuild(appConfig.aws.basePath.prod, `${prodDestDirectory}${appPathSuffix}index.html`);
});
